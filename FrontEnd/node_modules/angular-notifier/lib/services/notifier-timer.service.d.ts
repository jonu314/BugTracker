/**
 * Notifier timer service
 *
 * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a
 * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NotifierTimerService {
    /**
     * Timestamp (in ms), created in the moment the timer starts
     */
    private now;
    /**
     * Remaining time (in ms)
     */
    private remaining;
    /**
     * Timeout ID, used for clearing the timeout later on
     */
    private timerId;
    /**
     * Promise resolve function, eventually getting called once the timer finishes
     */
    private finishPromiseResolver;
    /**
     * Constructor
     */
    constructor();
    /**
     * Start (or resume) the timer
     *
     * @param   duration Timer duration, in ms
     * @returns          Promise, resolved once the timer finishes
     */
    start(duration: number): Promise<void>;
    /**
     * Pause the timer
     */
    pause(): void;
    /**
     * Continue the timer
     */
    continue(): void;
    /**
     * Stop the timer
     */
    stop(): void;
    /**
     * Finish up the timeout by resolving the timer promise
     */
    private finish;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NotifierTimerService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NotifierTimerService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItdGltZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJub3RpZmllci10aW1lci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBOb3RpZmllciB0aW1lciBzZXJ2aWNlXG4gKlxuICogVGhpcyBzZXJ2aWNlIGFjdHMgYXMgYSB0aW1lciwgbmVlZGVkIGR1ZSB0byB0aGUgc3RpbGwgcmF0aGVyIGxpbWl0ZWQgc2V0VGltZW91dCBKYXZhU2NyaXB0IEFQSS4gVGhlIHRpbWVyIHNlcnZpY2UgY2FuIHN0YXJ0IGFuZCBzdG9wIGFcbiAqIHRpbWVyLiBGdXJ0aGVybW9yZSwgaXQgY2FuIGFsc28gcGF1c2UgdGhlIHRpbWVyIGF0IGFueSB0aW1lLCBhbmQgcmVzdW1lIGxhdGVyIG9uLiBUaGUgdGltZXIgQVBJIHdvcmtkIHByb21pc2UtYmFzZWQuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5vdGlmaWVyVGltZXJTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBUaW1lc3RhbXAgKGluIG1zKSwgY3JlYXRlZCBpbiB0aGUgbW9tZW50IHRoZSB0aW1lciBzdGFydHNcbiAgICAgKi9cbiAgICBwcml2YXRlIG5vdztcbiAgICAvKipcbiAgICAgKiBSZW1haW5pbmcgdGltZSAoaW4gbXMpXG4gICAgICovXG4gICAgcHJpdmF0ZSByZW1haW5pbmc7XG4gICAgLyoqXG4gICAgICogVGltZW91dCBJRCwgdXNlZCBmb3IgY2xlYXJpbmcgdGhlIHRpbWVvdXQgbGF0ZXIgb25cbiAgICAgKi9cbiAgICBwcml2YXRlIHRpbWVySWQ7XG4gICAgLyoqXG4gICAgICogUHJvbWlzZSByZXNvbHZlIGZ1bmN0aW9uLCBldmVudHVhbGx5IGdldHRpbmcgY2FsbGVkIG9uY2UgdGhlIHRpbWVyIGZpbmlzaGVzXG4gICAgICovXG4gICAgcHJpdmF0ZSBmaW5pc2hQcm9taXNlUmVzb2x2ZXI7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpO1xuICAgIC8qKlxuICAgICAqIFN0YXJ0IChvciByZXN1bWUpIHRoZSB0aW1lclxuICAgICAqXG4gICAgICogQHBhcmFtICAgZHVyYXRpb24gVGltZXIgZHVyYXRpb24sIGluIG1zXG4gICAgICogQHJldHVybnMgICAgICAgICAgUHJvbWlzZSwgcmVzb2x2ZWQgb25jZSB0aGUgdGltZXIgZmluaXNoZXNcbiAgICAgKi9cbiAgICBzdGFydChkdXJhdGlvbjogbnVtYmVyKTogUHJvbWlzZTx2b2lkPjtcbiAgICAvKipcbiAgICAgKiBQYXVzZSB0aGUgdGltZXJcbiAgICAgKi9cbiAgICBwYXVzZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbnRpbnVlIHRoZSB0aW1lclxuICAgICAqL1xuICAgIGNvbnRpbnVlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgdGltZXJcbiAgICAgKi9cbiAgICBzdG9wKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRmluaXNoIHVwIHRoZSB0aW1lb3V0IGJ5IHJlc29sdmluZyB0aGUgdGltZXIgcHJvbWlzZVxuICAgICAqL1xuICAgIHByaXZhdGUgZmluaXNoO1xufVxuIl19